plugins {
    id 'com.android.application'
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.fan.gradle:plugin:1.0.0'

}
apply plugin: MyPlugin // 要记得加这句, 不加不生效
apply plugin: 'com.fan.gradle.myplugin.FanPlugin'
//apply plugin: 'com.fan.gradle'
//apply plugin: 'com.fan.gradle.gradle_plugin_singleton'
//apply plugin: 'com.fan.gradle.gradle_plugin_singleton.GradleSingleton'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.fan.gradleplugin"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}



// 自定义插件的第一种方式: 直接写在 build.gradle 中
// 然后在使用的地方 apply plugin: MyPlugin
class MyPlugin implements Plugin<Project> {
    @Override
    void apply(Project target) {
        println('MyPlugin执行了')
        target.task("MyPluginTask") {
            doLast {
                println('MyPlugin中的task执行了')
            }
        }
    }
}